#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ML —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç REST API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å RabbitMQ
"""

import requests
import base64
import json
import time
import io
from PIL import Image, ImageDraw, ImageFont
import argparse


def create_test_image() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ñ–æ—Ä–º—É–ª—ã
    width, height = 300, 100
    image = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(image)
    
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É–ª—É
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç 
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        font = ImageFont.load_default()
    
    # –§–æ—Ä–º—É–ª–∞: x^2 + y^2 = r^2
    formula_text = "x¬≤ + y¬≤ = r¬≤"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    bbox = draw.textbbox((0, 0), formula_text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    x = (width - text_width) // 2
    y = (height - text_height) // 2
    
    draw.text((x, y), formula_text, fill='black', font=font)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = io.BytesIO()
    image.save(buffer, format='PNG')
    image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    return image_data


def test_rest_api(api_url: str, test_image: str) -> dict:
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API
    
    Args:
        api_url: URL API —Å–µ—Ä–≤–µ—Ä–∞
        test_image: Base64 encoded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API: {api_url}")
    
    # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = {
        "username": "test_user",
        "email": "test@example.com", 
        "password": "test_password"
    }
    
    try:
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        register_response = requests.post(
            f"{api_url}/auth/register",
            json=test_user,
            timeout=10
        )
        
        if register_response.status_code == 409:
            print("‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif register_response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {register_response.status_code}")
            return {"success": False, "error": f"Registration failed: {register_response.status_code}"}
        
        # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        login_data = {
            "username": test_user["username"],
            "password": test_user["password"]
        }
        
        login_response = requests.post(
            f"{api_url}/auth/login",
            data=login_data,
            timeout=10
        )
        
        if login_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            return {"success": False, "error": f"Login failed: {login_response.status_code}"}
        
        token_data = login_response.json()
        access_token = token_data["access_token"]
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥–∏–∫—Ç–∞
        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        
        headers = {"Authorization": f"Bearer {access_token}"}
        predict_data = {
            "filename": "test_formula.png",
            "file_content": test_image,
            "model_id": 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –º–æ–¥–µ–ª—å —Å ID 1
        }
        
        predict_response = requests.post(
            f"{api_url}/tasks/predict",
            json=predict_data,
            headers=headers,
            timeout=30
        )
        
        if predict_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {predict_response.status_code}")
            print(f"Response: {predict_response.text}")
            return {"success": False, "error": f"Prediction failed: {predict_response.status_code}"}
        
        task_data = predict_response.json()
        task_id = task_data["id"]
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        # 4. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        max_attempts = 30
        attempt = 0
        
        while attempt < max_attempts:
            task_response = requests.get(
                f"{api_url}/tasks/{task_id}",
                headers=headers,
                timeout=10
            )
            
            if task_response.status_code == 200:
                task_info = task_response.json()
                status = task_info["status"]
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status}")
                
                if status == "completed":
                    print(f"üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {task_info['output_data']}")
                    return {
                        "success": True,
                        "task_id": task_id,
                        "result": task_info['output_data'],
                        "status": status
                    }
                elif status == "failed":
                    print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {task_info['error_message']}")
                    return {
                        "success": False,
                        "task_id": task_id,
                        "error": task_info['error_message'],
                        "status": status
                    }
            
            time.sleep(2)
            attempt += 1
        
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        return {"success": False, "error": "Timeout waiting for result"}
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {"success": False, "error": f"Network error: {e}"}
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {"success": False, "error": f"Unexpected error: {e}"}


def test_telegram_bot(bot_token: str) -> dict:
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
    
    Args:
        bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç
        response = requests.get(
            f"https://api.telegram.org/bot{bot_token}/getMe",
            timeout=10
        )
        
        if response.status_code == 200:
            bot_info = response.json()
            if bot_info["ok"]:
                print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info['result']['username']}")
                return {"success": True, "bot_info": bot_info["result"]}
            else:
                print("‚ùå –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return {"success": False, "error": "Bot is not active"}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {response.status_code}")
            return {"success": False, "error": f"Bot check failed: {response.status_code}"}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return {"success": False, "error": f"Bot test error: {e}"}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--api-url', default='http://localhost:8000', help='URL API —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--bot-token', help='–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞')
    parser.add_argument('--skip-bot', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞')
    
    args = parser.parse_args()
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("üñºÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    test_image = create_test_image()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º REST API
    api_result = test_rest_api(args.api_url, test_image)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
    bot_result = None
    if not args.skip_bot and args.bot_token:
        bot_result = test_telegram_bot(args.bot_token)
    elif not args.skip_bot:
        print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞")
        bot_result = {"success": False, "error": "No bot token provided"}
    else:
        print("‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        bot_result = {"success": True, "skipped": True}
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    print(f"REST API: {'‚úÖ –£–°–ü–ï–®–ù–û' if api_result['success'] else '‚ùå –ù–ï–£–°–ü–ï–®–ù–û'}")
    if not api_result['success']:
        print(f"  –û—à–∏–±–∫–∞: {api_result['error']}")
    else:
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {api_result.get('result', 'N/A')}")
    
    if not bot_result.get('skipped', False):
        print(f"Telegram Bot: {'‚úÖ –£–°–ü–ï–®–ù–û' if bot_result['success'] else '‚ùå –ù–ï–£–°–ü–ï–®–ù–û'}")
        if not bot_result['success']:
            print(f"  –û—à–∏–±–∫–∞: {bot_result['error']}")
    else:
        print("Telegram Bot: ‚ö†Ô∏è  –ü–†–û–ü–£–©–ï–ù–û")
    
    overall_success = api_result['success'] and (bot_result['success'] or bot_result.get('skipped', False))
    print(f"\n–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –£–°–ü–ï–®–ù–û' if overall_success else '‚ùå –ù–ï–£–°–ü–ï–®–ù–û'}")
    
    return 0 if overall_success else 1


if __name__ == "__main__":
    exit(main())