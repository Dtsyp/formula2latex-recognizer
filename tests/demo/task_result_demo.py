#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
"""
import asyncio
import base64
import json
import os
import requests
import time
from io import BytesIO
from PIL import Image


API_BASE_URL = "http://localhost:8000"


class TaskResultDemo:
    def __init__(self):
        self.token = None
        self.session = requests.Session()

    def create_test_image(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ñ–æ—Ä–º—É–ª—ã
        img = Image.new('RGB', (300, 100), color='white')
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
        # –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        return base64.b64encode(buffer.getvalue()).decode()

    def register_and_login(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        user_data = {
            "email": f"test_user_{int(time.time())}@example.com",
            "password": "testpassword123"
        }
        
        response = self.session.post(f"{API_BASE_URL}/auth/register", json=user_data)
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['email']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")
            return False

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        response = self.session.post(f"{API_BASE_URL}/auth/login", json=user_data)
        if response.status_code == 200:
            self.token = response.json()["access_token"]
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
            return False

    def get_models(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print("\nü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        
        response = self.session.get(f"{API_BASE_URL}/models")
        if response.status_code == 200:
            models = response.json()
            if models:
                model = models[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model['name']} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {model['credit_cost']})")
                return model['id']
            else:
                print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.text}")
            return None

    def create_prediction_task(self, model_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        print("\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        
        headers = {"Authorization": f"Bearer {self.token}"}
        image_data = self.create_test_image()
        
        task_data = {
            "model_id": model_id,
            "file_content": image_data,
            "filename": "test_formula.png"
        }
        
        response = self.session.post(
            f"{API_BASE_URL}/predict", 
            json=task_data, 
            headers=headers
        )
        
        if response.status_code == 200:
            task = response.json()
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task['id']}")
            print(f"üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {task['credits_charged']}")
            return task['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.text}")
            return None

    def demo_get_task_result_methods(self, task_id):
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
        """
        print(f"\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id}...")
        headers = {"Authorization": f"Bearer {self.token}"}
        
        # –°–ø–æ—Å–æ–± 1: –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ RabbitMQ
        print("\nüì® –°–ø–æ—Å–æ–± 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ RabbitMQ –æ—á–µ—Ä–µ–¥–∏")
        print("   (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_task_result –º–µ—Ç–æ–¥)")
        print("   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Result Processor")
        print("   –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º")
        
        try:
            start_time = time.time()
            response = self.session.get(
                f"{API_BASE_URL}/tasks/{task_id}/result?timeout=30",
                headers=headers
            )
            elapsed = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f}—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:")
                print(f"   –£—Å–ø–µ—Ö: {result.get('success')}")
                if result.get('success'):
                    print(f"   LaTeX: {result.get('latex_code', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.2%}")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}")
            elif response.status_code == 408:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç ({elapsed:.2f}—Å) - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.text}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        
        # –°–ø–æ—Å–æ–± 2: –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ë–î (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É)
        print(f"\nüíæ –°–ø–æ—Å–æ–± 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î")
        print("   (Result Processor –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –ë–î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)")
        print("   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á")
        print("   –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        try:
            response = self.session.get(
                f"{API_BASE_URL}/tasks/{task_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                task = response.json()
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∏–∑ –ë–î:")
                print(f"   –°—Ç–∞—Ç—É—Å: {task['status']}")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {task.get('output_data', '–ü–æ–∫–∞ –Ω–µ—Ç')}")
                print(f"   –û—à–∏–±–∫–∞: {task.get('error_message', '–ù–µ—Ç')}")
                print(f"   –°–æ–∑–¥–∞–Ω–∞: {task['created_at']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.text}")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")

        # –°–ø–æ—Å–æ–± 3: Polling (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
        print(f"\nüîÑ –°–ø–æ—Å–æ–± 3: Polling - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        print("   (–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)")
        
        for i in range(3):
            print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/3...")
            try:
                response = self.session.get(
                    f"{API_BASE_URL}/tasks/{task_id}",
                    headers=headers
                )
                
                if response.status_code == 200:
                    task = response.json()
                    if task['status'] in ['completed', 'failed']:
                        print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task['status']}")
                        break
                    else:
                        print(f"   ‚è≥ –°—Ç–∞—Ç—É—Å: {task['status']}")
                        time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                    break
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                break

    def demo_task_history(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
        print(f"\nüìã –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        
        headers = {"Authorization": f"Bearer {self.token}"}
        response = self.session.get(f"{API_BASE_URL}/tasks", headers=headers)
        
        if response.status_code == 200:
            tasks = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
            for task in tasks:
                print(f"   üìù {task['id']}: {task['status']} "
                      f"(–∫—Ä–µ–¥–∏—Ç—ã: {task['credits_charged']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.text}")

    def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–¥–∞—á")
        print("=" * 60)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.register_and_login():
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_id = self.get_models()
        if not model_id:
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_id = self.create_prediction_task(model_id)
        if not task_id:
            return
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.demo_get_task_result_methods(task_id)
        
        # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
        self.demo_task_history()
        
        print("\n" + "=" * 60)
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìñ –í—ã–≤–æ–¥—ã:")
        print("1. –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /tasks/{task_id}/result –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        print("   –Ω–∞–ø—Ä—è–º—É—é –∏–∑ RabbitMQ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î")
        print("2. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ /tasks/{task_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
        print("3. Polling –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏")
        print("4. –í—Å–µ –º–µ—Ç–æ–¥—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    print("üß™ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞: docker-compose up -d")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    demo = TaskResultDemo()
    demo.run_demo()