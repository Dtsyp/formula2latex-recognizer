#!/usr/bin/env python3
import base64
import io
import json
import time
from PIL import Image, ImageDraw, ImageFont
import requests

def create_formula_image(formula_text: str = "x¬≤ + y¬≤ = r¬≤") -> str:
    print(f"üñºÔ∏è  –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–æ–π: {formula_text}")
    
    width, height = 400, 120
    image = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(image)
    
    try:
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 36)
    except:
        font = ImageFont.load_default()
    
    bbox = draw.textbbox((0, 0), formula_text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    x = (width - text_width) // 2
    y = (height - text_height) // 2
    
    draw.text((x, y), formula_text, fill='black', font=font)
    
    buffer = io.BytesIO()
    image.save(buffer, format='PNG')
    image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return image_data

def test_full_ml_pipeline():
    base_url = "http://localhost:8000"
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ML —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    test_image = create_formula_image("‚à´x¬≤dx = x¬≥/3 + C")
    print("üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_data = {
        "username": "ml_test_user",
        "email": "mltest@example.com",
        "password": "testpass123"
    }
    
    try:
        requests.post(f"{base_url}/auth/register", json=user_data)
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {e}")
    
    # 3. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    login_data = {
        "email": user_data["email"],
        "password": user_data["password"]
    }
    
    login_response = requests.post(f"{base_url}/auth/login", json=login_data)
    
    if login_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.text}")
        return False
    
    token_data = login_response.json()
    access_token = token_data["access_token"]
    headers = {"Authorization": f"Bearer {access_token}"}
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    
    # 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ML –º–æ–¥–µ–ª–µ–π
    print("ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π...")
    models_response = requests.get(f"{base_url}/models", headers=headers)
    
    if models_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {models_response.text}")
        return False
    
    models = models_response.json()
    if not models:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ML –º–æ–¥–µ–ª–µ–π")
        return False
        
    model_id = models[0]['id']
    model_name = models[0]['name']
    model_cost = models[0]['credit_cost']
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {model_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤)")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    print("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
    wallet_response = requests.get(f"{base_url}/wallet", headers=headers)
    
    if wallet_response.status_code == 200:
        wallet = wallet_response.json()
        balance = float(wallet['balance'])
        print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        
        if balance < float(model_cost):
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫...")
            topup_data = {"amount": 50.0}
            requests.post(f"{base_url}/wallet/topup", json=topup_data, headers=headers)
            print("‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω")
    
    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ ML –æ–±—Ä–∞–±–æ—Ç–∫—É
    print("üî¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ ML –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    prediction_data = {
        "filename": "test_formula.png", 
        "file_content": test_image,
        "model_id": model_id
    }
    
    predict_response = requests.post(
        f"{base_url}/predict", 
        json=prediction_data,
        headers=headers
    )
    
    if predict_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {predict_response.text}")
        return False
    
    task_data = predict_response.json()
    task_id = task_data["id"]
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ML –æ—á–µ—Ä–µ–¥—å: {task_id}")
    print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {task_data['status']}")
    
    # 7. –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ML –≤–æ—Ä–∫–µ—Ä–æ–º...")
    max_wait_time = 60  # 60 —Å–µ–∫—É–Ω–¥
    check_interval = 3   # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    
    start_time = time.time()
    
    while (time.time() - start_time) < max_wait_time:
        task_response = requests.get(f"{base_url}/tasks/{task_id}", headers=headers)
        
        if task_response.status_code == 200:
            task_info = task_response.json()
            status = task_info["status"]
            
            print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            if status == "completed":
                print("üéâ ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç LaTeX: {task_info['output_data']}")
                print(f"üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {task_info['credits_charged']}")
                return True
                
            elif status == "failed":
                print(f"‚ùå ML –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {task_info['error_message']}")
                print(f"üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {task_info['credits_charged']}")
                return False
                
            elif status in ["pending", "in_progress"]:
                print("‚è≥ –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
        
        time.sleep(check_interval)
    
    print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    return False

def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    components = [
        ("Backend API", "http://localhost:8000/health"),
        ("RabbitMQ Management", "http://localhost:15672"),
    ]
    
    all_good = True
    
    for name, url in components:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è  {name}: –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                all_good = False
        except Exception as e:
            print(f"‚ùå {name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")
            all_good = False
    
    return all_good

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ End-to-End —Ç–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã Formula2LaTeX")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    if not check_system_status():
        print("\n‚ùå –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        return 1
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    success = test_full_ml_pipeline()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ API ‚Üî RabbitMQ ‚Üî ML Worker —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return 0
    else:
        print("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        print("   docker-compose logs ml-worker-1")
        print("   docker-compose logs result-processor")
        return 1

if __name__ == "__main__":
    exit(main())