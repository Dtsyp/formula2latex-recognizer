#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è REST API
"""
import requests
import base64
import json
from decimal import Decimal

API_BASE = "http://localhost:8000"

def demo_api():
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø REST API")
    print("=" * 50)
    
    # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n1Ô∏è‚É£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    user_data = {
        "email": "api_demo@example.com",
        "password": "demo123456"
    }
    
    response = requests.post(f"{API_BASE}/auth/register", json=user_data)
    if response.status_code == 200:
        user_info = response.json()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_info['email']}")
        print(f"   ID: {user_info['id']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.json()}")
        return
    
    # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    print("\n2Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    response = requests.post(f"{API_BASE}/auth/login", json=user_data)
    if response.status_code == 200:
        token_data = response.json()
        token = token_data["access_token"]
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        print(f"   –¢–æ–∫–µ–Ω: {token[:50]}...")
        headers = {"Authorization": f"Bearer {token}"}
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.json()}")
        return
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("\n3Ô∏è‚É£ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï")
    response = requests.get(f"{API_BASE}/auth/me", headers=headers)
    if response.status_code == 200:
        user_me = response.json()
        print(f"‚úÖ ID: {user_me['id']}")
        print(f"   Email: {user_me['email']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
    print("\n4Ô∏è‚É£ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–®–ï–õ–¨–ö–ï")
    response = requests.get(f"{API_BASE}/wallet", headers=headers)
    if response.status_code == 200:
        wallet = response.json()
        print(f"‚úÖ ID –∫–æ—à–µ–ª—å–∫–∞: {wallet['id']}")
        print(f"   –ë–∞–ª–∞–Ω—Å: {wallet['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    print("\n5Ô∏è‚É£ –î–û–°–¢–£–ü–ù–´–ï ML –ú–û–î–ï–õ–ò")
    response = requests.get(f"{API_BASE}/models")
    if response.status_code == 200:
        models = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        for i, model in enumerate(models, 1):
            print(f"   {i}. {model['name']} - {model['credit_cost']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        
        if models:
            selected_model = models[0]  # –í—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
        return
    
    # 6. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤)
    print("\n6Ô∏è‚É£ –ü–û–ü–´–¢–ö–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ë–ï–ó –ö–†–ï–î–ò–¢–û–í")
    dummy_image = base64.b64encode(b"dummy image content for testing").decode()
    prediction_data = {
        "model_id": selected_model["id"],
        "file_content": dummy_image,
        "filename": "test_formula.png"
    }
    
    response = requests.post(f"{API_BASE}/predict", json=prediction_data, headers=headers)
    if response.status_code == 402:
        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {response.json()['detail']}")
    else:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {response.status_code} - {response.json()}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø—É—Å—Ç–∞—è)
    print("\n7Ô∏è‚É£ –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ü–£–°–¢–ê–Ø)")
    response = requests.get(f"{API_BASE}/wallet/transactions", headers=headers)
    if response.status_code == 200:
        transactions = response.json()
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(transactions)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á (–ø—É—Å—Ç–∞—è)
    print("\n8Ô∏è‚É£ –ò–°–¢–û–†–ò–Ø –ó–ê–î–ê–ß (–ü–£–°–¢–ê–Ø)")
    response = requests.get(f"{API_BASE}/tasks", headers=headers)
    if response.status_code == 200:
        tasks = response.json()
        print(f"‚úÖ –ó–∞–¥–∞—á –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(tasks)}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
    print("\n9Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ó–ê–î–ê–ß–ò")
    fake_task_id = "00000000-0000-0000-0000-000000000000"
    response = requests.get(f"{API_BASE}/tasks/{fake_task_id}", headers=headers)
    if response.status_code == 404:
        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {response.json()['detail']}")
    else:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {response.status_code}")
    
    # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    print("\nüîü –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø API")
    response = requests.get(f"{API_BASE}/health")
    if response.status_code == 200:
        health = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {health['status']}")
        print(f"   –°–µ—Ä–≤–∏—Å: {health['service']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
    
    print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã")
    print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º")
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∑–∞–¥–∞—á")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("‚úÖ Health checks")
    
    print(f"\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {API_BASE}/docs")
    print(f"üìö ReDoc: {API_BASE}/redoc")

def test_api_security():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API"""
    print("\nüîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 30)
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    print("\nüîê –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    protected_endpoints = [
        "/auth/me",
        "/wallet", 
        "/wallet/transactions",
        "/predict",
        "/tasks"
    ]
    
    for endpoint in protected_endpoints:
        response = requests.get(f"{API_BASE}{endpoint}")
        if response.status_code == 403:
            print(f"‚úÖ {endpoint}: –∑–∞—â–∏—â–µ–Ω")
        else:
            print(f"‚ùå {endpoint}: –ù–ï –∑–∞—â–∏—â–µ–Ω ({response.status_code})")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    print("\nüö´ –¢–µ—Å—Ç —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    fake_headers = {"Authorization": "Bearer fake_token"}
    response = requests.get(f"{API_BASE}/auth/me", headers=fake_headers)
    if response.status_code == 401:
        print("‚úÖ –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    else:
        print(f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç ({response.status_code})")

if __name__ == "__main__":
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            demo_api()
            test_api_security()
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {API_BASE}")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload")