#!/usr/bin/env python3
import sys
import os
from decimal import Decimal
from uuid import uuid4

sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_domain_models():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    
    from domain.user import User, Admin
    from domain.wallet import Wallet
    from domain.file import File
    from domain.model import MLModel
    from domain.task import RecognitionTask
    
    class DemoMLModel(MLModel):
        def preprocess(self, file):
            return f"preprocessed_{file.path}"
        
        def predict(self, data):
            return "\\sum_{i=1}^{n} x_i^2"
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—à–µ–ª—å–∫–∞
        wallet = Wallet(uuid4(), uuid4(), Decimal("0"))
        user = User(uuid4(), "test@example.com", "password_hash", wallet)
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.email}")
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {user.wallet.balance}")
        
        # –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        top_up_amount = Decimal("100.00")
        txn = user.wallet.top_up(top_up_amount)
        print(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {top_up_amount}: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {user.wallet.balance}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        model = DemoMLModel(uuid4(), "TestModel", Decimal("5.00"))
        file = File("/path/to/test.png", "image/png")
        task = RecognitionTask(uuid4(), user.id, file, model)
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.id}")
        print(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å: {task.credits_charged}")
        
        # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        user.execute_task(file, model)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.wallet.balance}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(user.wallet.transactions)}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(user.tasks)}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
        admin_wallet = Wallet(uuid4(), uuid4(), Decimal("0"))
        admin = Admin(uuid4(), "admin@example.com", "admin_hash", admin_wallet)
        
        # –ê–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_top_up = admin.top_up_user(user, Decimal("50.00"))
        print(f"‚úÖ –ê–¥–º–∏–Ω –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 50.00")
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.wallet.balance}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–æ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö: {e}")
        return False

def test_sqlalchemy_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º SQLAlchemy –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy –º–æ–¥–µ–ª–µ–π...")
    
    try:
        from infrastructure.models import (
            UserModel, WalletModel, TransactionModel, 
            MLModelModel, FileModel, TaskModel,
            UserRole, TaskStatus, TransactionType
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–µ–π (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        user_model = UserModel(
            email="test@example.com",
            password_hash="hash123",
            role=UserRole.USER
        )
        
        wallet_model = WalletModel(
            owner_id=user_model.id,
            balance=Decimal("100.00")
        )
        
        model_model = MLModelModel(
            name="TestModel",
            credit_cost=Decimal("5.00")
        )
        
        print("‚úÖ SQLAlchemy –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_model.email}")
        print(f"‚úÖ –†–æ–ª—å: {user_model.role}")
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_model.balance}")
        print(f"‚úÖ ML –º–æ–¥–µ–ª—å: {model_model.name}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {model_model.credit_cost}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SQLAlchemy –º–æ–¥–µ–ª—è—Ö: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules_to_test = [
        'infrastructure.database',
        'infrastructure.models',
        'infrastructure.repositories',
        'domain.user',
        'domain.wallet',
        'domain.task',
        'domain.file',
        'domain.model'
    ]
    
    success_count = 0
    for module in modules_to_test:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {module}: {e}")
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(modules_to_test)} –º–æ–¥—É–ª–µ–π")
    return success_count == len(modules_to_test)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã formula2latex-recognizer")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–î–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏", test_domain_models),
        ("SQLAlchemy –º–æ–¥–µ–ª–∏", test_sqlalchemy_models),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 60)
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Compose –¥–ª—è –ë–î: docker-compose up -d database")
        print("2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ë–î: python src/infrastructure/init_db.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: pytest tests/")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)