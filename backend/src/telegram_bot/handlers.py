"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from .api_client import APIClient
from .user_storage import UserStorage

logger = logging.getLogger(__name__)


class BotHandlers:
    """–ö–ª–∞—Å—Å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    
    def __init__(self, api_client: APIClient, user_storage: UserStorage):
        self.api_client = api_client
        self.user_storage = user_storage
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
        if self.user_storage.is_authenticated(user_id):
            keyboard.insert(0, [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")])
        else:
            keyboard.insert(0, [KeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"), KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Formula2LaTeX Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ LaTeX –∫–æ–¥.

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
‚Ä¢ üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –≤ LaTeX
‚Ä¢ üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤
‚Ä¢ üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–æ–π
3. –ü–æ–ª—É—á–∏—Ç–µ LaTeX –∫–æ–¥!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá
"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/profile` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
‚Ä¢ `/balance` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ `/history` - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
‚Ä¢ `/logout` - –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1Ô∏è‚É£ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*
   - –ù–∞–∂–º–∏—Ç–µ "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
   - –ò–ª–∏ "üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" –¥–ª—è –≤—Ö–æ–¥–∞

2Ô∏è‚É£ *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª*
   - –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—É–ª–æ–π
   - –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
   - –ü–æ–ª—É—á–∏—Ç–µ LaTeX –∫–æ–¥

3Ô∏è‚É£ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º*
   - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤
   - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

4Ô∏è‚É£ *–ò—Å—Ç–æ—Ä–∏—è*
   - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏
   - –ü–æ–ª—É—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
üì∏ PNG, JPG, JPEG, GIF

*–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å?*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
"""
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if self.user_storage.is_authenticated(user_id):
            keyboard = [
                [InlineKeyboardButton("üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É", callback_data="recognize")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                 InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", callback_data="history"),
                 InlineKeyboardButton("üîß –ú–æ–¥–µ–ª–∏", callback_data="models")],
                [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
                 InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="login")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if self.user_storage.is_authenticated(user_id) else "üîê *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è*"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def register_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if self.user_storage.is_authenticated(user_id):
            await update.callback_query.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        await self.user_storage.set_current_step(user_id, "register_email")
        
        await update.callback_query.edit_message_text(
            "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def login_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if self.user_storage.is_authenticated(user_id):
            await update.callback_query.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        await self.user_storage.set_current_step(user_id, "login_email")
        
        await update.callback_query.edit_message_text(
            "üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def profile_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = update.effective_user.id
        
        if not self.user_storage.is_authenticated(user_id):
            await update.callback_query.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            return
        
        token = self.user_storage.get_jwt_token(user_id)
        user_info = await self.api_client.get_user_info(token)
        
        if user_info:
            text = f"""
üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

üìß Email: `{user_info.email}`
üÜî ID: `{user_info.id}`
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
"""
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def balance_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
        user_id = update.effective_user.id
        
        if not self.user_storage.is_authenticated(user_id):
            await update.callback_query.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            return
        
        token = self.user_storage.get_jwt_token(user_id)
        wallet = await self.api_client.get_wallet(token)
        
        if wallet:
            text = f"""
üí∞ *–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞*

üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{wallet.balance}` –∫—Ä–µ–¥–∏—Ç–æ–≤
üÜî ID –∫–æ—à–µ–ª—å–∫–∞: `{wallet.id}`

üí° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ö–∞–∂–¥–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Ç—Ä–∞—Ç–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
‚Ä¢ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="transactions")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def logout_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        
        await self.user_storage.logout_user(user_id)
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üö™ *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã*\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def text_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        current_step = self.user_storage.get_current_step(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.menu_command(update, context)
            return
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
            return
        elif text == "üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
            # –ò–º–∏—Ç–∏—Ä—É–µ–º callback_query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class FakeCallbackQuery:
                def __init__(self, update):
                    self.message = update.message
                    self.edit_message_text = self.message.reply_text
                    self.answer = lambda x: None
                
            update.callback_query = FakeCallbackQuery(update)
            await self.login_start(update, context)
            return
        elif text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            class FakeCallbackQuery:
                def __init__(self, update):
                    self.message = update.message
                    self.edit_message_text = self.message.reply_text
                    self.answer = lambda x: None
                
            update.callback_query = FakeCallbackQuery(update)
            await self.register_start(update, context)
            return
        elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            if not self.user_storage.is_authenticated(user_id):
                await update.message.reply_text("üîê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
                return
            
            token = self.user_storage.get_jwt_token(user_id)
            user_info = await self.api_client.get_user_info(token)
            
            if user_info:
                text_msg = f"""
üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

üìß Email: `{user_info.email}`
üÜî ID: `{user_info.id}`
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
"""
            else:
                text_msg = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"
            
            await update.message.reply_text(text_msg, parse_mode=ParseMode.MARKDOWN)
            return
        elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
            if not self.user_storage.is_authenticated(user_id):
                await update.message.reply_text("üîê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
                return
            
            token = self.user_storage.get_jwt_token(user_id)
            wallet = await self.api_client.get_wallet(token)
            
            if wallet:
                text_msg = f"""
üí∞ *–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞*

üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{wallet.balance}` –∫—Ä–µ–¥–∏—Ç–æ–≤
üÜî ID –∫–æ—à–µ–ª—å–∫–∞: `{wallet.id}`

üí° *–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É*
"""
            else:
                text_msg = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ"
            
            await update.message.reply_text(text_msg, parse_mode=ParseMode.MARKDOWN)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ multi-step –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if current_step == "register_email":
            await self._handle_register_email(update, context, text)
        elif current_step == "register_password":
            await self._handle_register_password(update, context, text)
        elif current_step == "login_email":
            await self._handle_login_email(update, context, text)
        elif current_step == "login_password":
            await self._handle_login_password(update, context, text)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def _handle_register_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE, email: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in email or "." not in email:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await self.user_storage.set_temp_data(user_id, {"email": email})
        await self.user_storage.set_current_step(user_id, "register_password")
        
        await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    
    async def _handle_register_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if len(password) < 6:
            await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        temp_data = self.user_storage.get_temp_data(user_id)
        email = temp_data["email"]
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        user = await self.api_client.register(email, password)
        
        if user:
            await update.message.reply_text(
                f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: `{email}`\n\n–¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
        
        await self.user_storage.set_current_step(user_id, None)
        await self.user_storage.clear_temp_data(user_id)
    
    async def _handle_login_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE, email: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        if "@" not in email or "." not in email:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await self.user_storage.set_temp_data(user_id, {"email": email})
        await self.user_storage.set_current_step(user_id, "login_password")
        
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    
    async def _handle_login_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE, password: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        temp_data = self.user_storage.get_temp_data(user_id)
        email = temp_data["email"]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        token = await self.api_client.login(email, password)
        
        if token:
            await self.user_storage.authenticate_user(user_id, email, token)
            
            await update.message.reply_text(
                f"‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, `{email}`!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        await self.user_storage.set_current_step(user_id, None)
        await self.user_storage.clear_temp_data(user_id)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "menu":
            await self.menu_command(update, context)
        elif data == "register":
            await self.register_start(update, context)
        elif data == "login":
            await self.login_start(update, context)
        elif data == "profile":
            await self.profile_handler(update, context)
        elif data == "balance":
            await self.balance_handler(update, context)
        elif data == "logout":
            await self.logout_handler(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data == "recognize":
            await self._start_recognition(update, context)
        elif data == "history":
            await self._show_history(update, context)
        elif data == "models":
            await self._show_models(update, context)
        elif data == "transactions":
            await self._show_transactions(update, context)
        elif data.startswith("model_"):
            await self._select_model(update, context, data.split("_")[1])
    
    async def _start_recognition(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not self.user_storage.is_authenticated(user_id):
            await update.callback_query.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            return
        
        await update.callback_query.edit_message_text(
            "üì∏ *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª–æ–π, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ—ë –≤ LaTeX –∫–æ–¥!",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
        user_id = update.effective_user.id
        
        if not self.user_storage.is_authenticated(user_id):
            await update.callback_query.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            return
        
        token = self.user_storage.get_jwt_token(user_id)
        tasks = await self.api_client.get_tasks(token)
        
        if not tasks:
            text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á*\n\nüì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
        else:
            text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á*\n\n"
            for i, task in enumerate(tasks[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_emoji = "‚úÖ" if task.status == "done" else "‚ùå"
                text += f"{i}. {status_emoji} {task.created_at[:19]} - {task.credits_charged} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            
            if len(tasks) > 5:
                text += f"\n... –∏ –µ—â–µ {len(tasks) - 5} –∑–∞–¥–∞—á"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_models(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        models = await self.api_client.get_models()
        
        if not models:
            text = "üîß *–ú–æ–¥–µ–ª–∏ ML*\n\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]]
        else:
            text = "üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ML*\n\n"
            keyboard = []
            for model in models:
                text += f"‚Ä¢ {model.name} - {model.credit_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                keyboard.append([InlineKeyboardButton(
                    f"{model.name} ({model.credit_cost} –∫—Ä–µ–¥.)",
                    callback_data=f"model_{model.id}"
                )])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_transactions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        user_id = update.effective_user.id
        
        token = self.user_storage.get_jwt_token(user_id)
        transactions = await self.api_client.get_transactions(token)
        
        if not transactions:
            text = "üìä *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π*\n\nüì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
        else:
            text = "üìä *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π*\n\n"
            for i, txn in enumerate(transactions[:5], 1):
                type_emoji = "‚ûï" if txn.type == "top_up" else "‚ûñ"
                text += f"{i}. {type_emoji} {txn.amount} ‚Üí {txn.post_balance}\n   {txn.created_at[:19]}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="balance")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _select_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE, model_id: str):
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        await self.user_storage.set_temp_data(user_id, {"selected_model_id": model_id})
        
        await update.callback_query.edit_message_text(
            "‚úÖ *–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞!*\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—É–ª–æ–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def photo_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        
        if not self.user_storage.is_authenticated(user_id):
            await update.message.reply_text("üîê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        temp_data = self.user_storage.get_temp_data(user_id)
        if not temp_data or "selected_model_id" not in temp_data:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
            models = await self.api_client.get_models()
            if models:
                keyboard = []
                for model in models:
                    keyboard.append([InlineKeyboardButton(
                        f"{model.name} ({model.credit_cost} –∫—Ä–µ–¥.)",
                        callback_data=f"model_{model.id}"
                    )])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üîß *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            else:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
                return
        
        model_id = temp_data["selected_model_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        file = await context.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await file.download_as_bytearray()
        filename = f"formula_{photo.file_id}.jpg"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            token = self.user_storage.get_jwt_token(user_id)
            task = await self.api_client.predict(token, model_id, bytes(file_content), filename)
            
            if task:
                if task.status == "done" and task.output_data:
                    result_text = f"""
‚úÖ *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*

üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: `{task.credits_charged}`

üî§ *LaTeX –∫–æ–¥:*
```latex
{task.output_data}
```

üÜî ID –∑–∞–¥–∞—á–∏: `{task.id}`
"""
                else:
                    result_text = f"""
‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è*

üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: `{task.credits_charged}`
üìù –û—à–∏–±–∫–∞: {task.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

üÜî ID –∑–∞–¥–∞—á–∏: `{task.id}`
"""
            else:
                result_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API."
            
            await processing_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.user_storage.clear_temp_data(user_id)
            
        except Exception as e:
            logger.error(f"Error processing image: {e}")
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    async def document_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"""
        user_id = update.effective_user.id
        
        if not self.user_storage.is_authenticated(user_id):
            await update.message.reply_text("üîê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª!")
            return
        
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not document.mime_type or not document.mime_type.startswith('image/'):
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, JPEG, GIF).")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ
        temp_data = self.user_storage.get_temp_data(user_id)
        if not temp_data or "selected_model_id" not in temp_data:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
            models = await self.api_client.get_models()
            if models:
                keyboard = []
                for model in models:
                    keyboard.append([InlineKeyboardButton(
                        f"{model.name} ({model.credit_cost} –∫—Ä–µ–¥.)",
                        callback_data=f"model_{model.id}"
                    )])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üîß *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        
        model_id = temp_data["selected_model_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        file_content = await file.download_as_bytearray()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            token = self.user_storage.get_jwt_token(user_id)
            task = await self.api_client.predict(token, model_id, bytes(file_content), document.file_name)
            
            if task:
                if task.status == "done" and task.output_data:
                    result_text = f"""
‚úÖ *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*

üìÅ –§–∞–π–ª: `{document.file_name}`
üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: `{task.credits_charged}`

üî§ *LaTeX –∫–æ–¥:*
```latex
{task.output_data}
```

üÜî ID –∑–∞–¥–∞—á–∏: `{task.id}`
"""
                else:
                    result_text = f"""
‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è*

üí∞ –°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: `{task.credits_charged}`
üìù –û—à–∏–±–∫–∞: {task.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

üÜî ID –∑–∞–¥–∞—á–∏: `{task.id}`
"""
            else:
                result_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API."
            
            await processing_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.user_storage.clear_temp_data(user_id)
            
        except Exception as e:
            logger.error(f"Error processing document: {e}")
            await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")