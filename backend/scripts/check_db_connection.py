#!/usr/bin/env python3
import sys
import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    load_dotenv()
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    urls_to_try = [
        os.getenv("DATABASE_URL"),
        "postgresql://app_user:SuperSecretPass123@localhost:5432/app_db",
        "postgresql://app_user:SuperSecretPass123@database:5432/app_db",
        "postgresql://postgres:postgres@localhost:5432/postgres"
    ]
    
    for i, url in enumerate(urls_to_try, 1):
        if not url:
            continue
            
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i}: {url}")
        
        try:
            engine = create_engine(url)
            with engine.connect() as conn:
                result = conn.execute(text("SELECT version()"))
                version = result.fetchone()[0]
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
                return url, engine
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            continue
    
    print("üíÄ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–π –ë–î")
    return None, None

def test_create_tables():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    url, engine = check_database_connection()
    if not engine:
        return False
    
    try:
        from infrastructure.database import Base
        import infrastructure.models
        
        print("\nüõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω—ã
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public'
            """))
            tables = [row[0] for row in result.fetchall()]
            
        expected_tables = ['users', 'wallets', 'transactions', 'ml_models', 'files', 'tasks']
        for table in expected_tables:
            if table in tables:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –ù–ï —Å–æ–∑–¥–∞–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    success = check_database_connection()[0] is not None
    if success:
        success = test_create_tables()
    
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. python src/infrastructure/init_db.py  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏")
        print("2. pytest tests/ -v                      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    else:
        print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ docker-compose up -d database")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")