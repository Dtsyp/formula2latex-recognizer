services:
  app:
    build:
      context: .
      dockerfile: src/Dockerfile
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      - database
      - rabbitmq
      - db-init

  telegram-bot:
    build:
      context: .
      dockerfile: src/Dockerfile
    command: python src/telegram_bot/main.py
    env_file:
      - .env
    environment:
      - API_BASE_URL=http://app:8000
    volumes:
      - ./src:/app/src
      - ./user_sessions.json:/app/user_sessions.json
    depends_on:
      - app
      - database
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - app
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: on-failure

  # ML Workers
  ml-worker-1:
    build:
      context: ../ml
      dockerfile: Dockerfile
    command: python worker.py --worker-id worker-1
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - rabbitmq
    restart: unless-stopped

  ml-worker-2:
    build:
      context: ../ml
      dockerfile: Dockerfile
    command: python worker.py --worker-id worker-2
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - rabbitmq
    restart: unless-stopped

  ml-worker-3:
    build:
      context: ../ml
      dockerfile: Dockerfile
    command: python worker.py --worker-id worker-3
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - rabbitmq
    restart: unless-stopped

  # Database Initialization
  db-init:
    build:
      context: .
      dockerfile: src/Dockerfile
    command: python src/infrastructure/init_db.py
    env_file:
      - .env
    depends_on:
      - database
    restart: "no"

  # Result Processor
  result-processor:
    build:
      context: .
      dockerfile: src/Dockerfile
    command: python src/services/result_processor.py
    env_file:
      - .env
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - database
      - rabbitmq
      - db-init
    restart: unless-stopped

  database:
    image: postgres:16.1
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  rabbitmq-data:
  postgres-data:
